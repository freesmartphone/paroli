
# This file is in YAML format (http://www.yaml.org/)
# We define a list of rules that will be automatically loaded
# When we start the oevents module of the framework daemon
#
# The attributes of a rule are :
# - trigger     : trigger object
# - filters     : filters object or list of filters objects
# - actions     : action object or list of actions objects
#
# We define the following functions :
# - CallStatus()            : create a trigger object activated on a call status event
# - PowerStatus()           : create a trigger object activated on a power status event
# - HasAttr(name, value)    : create a filter that accept signal with a given attribute
# - Not(filter)             : create a neg filter
# - PlaySound(file)         : Action that starts to play an audio file
# - StopSound(file)         : Action that stop an audio file
# - SetScenario(name)       : Action that sets an audio scenario
# - StartVibration
# - StopVibration
# - RingTone(cmd)           : cmd can be 'start' or 'stop'
# - Time(hour, min)         : create a trigger activated at the given time
# - Debug(msg)              : Action that prints a debug message (only for debuging)
-
    #
    # Suspend Handling
    #
    trigger: InputEvent()
    filters:
             - HasAttr(switch, "POWER")
             - HasAttr(event, "released")
             - HasAttr(duration, 0)
             - Not(CallListContains("active"))
             - Not(CallListContains("incoming"))
    actions: Suspend()
-
    #
    # Power button Handling
    #
    trigger: InputEvent()
    filters:
             - HasAttr(switch, "POWER")
             - HasAttr(event, "held")
             - HasAttr(duration, 2)
    actions: Shutdown()
-
    while: CallListContains("incoming")
    filters: Not(CallListContains("active"))
    actions:
             - SetDisplayBrightness("0", 90)

-
    while: CallStatus()
    filters:
            - Or(HasAttr(status, "outgoing"), HasAttr(status, "active"))
            - Not(BTHeadsetIsConnected())
    actions:
            - SetScenario(gsmhandset)
            - OccupyResource(CPU)

-
    while: CallStatus()
    filters:
            - Or(HasAttr(status, "outgoing"), HasAttr(status, "active"))
            - BTHeadsetIsConnected()
    actions:
            - SetScenario(gsmbluetooth)
            - BTHeadsetPlaying()
            - OccupyResource(CPU)

-
    while: PowerStatus()
    filters: HasAttr(status, "charging")
    actions: SetLed("gta02_power_orange", "light")

-
   while: PowerStatus()
   filters: Not(HasAttr(status, "discharging"))
   actions: OccupyResource(Display)
-
    while: PowerStatus()
    filters: HasAttr(status, "critical")
    actions: SetLed("gta02_power_orange", "blink")
-
    while: PowerStatus()
    filters: HasAttr(status, "full")
    actions: SetLed("gta02_power_blue", "light")
-
    trigger: PowerStatus()
    filters: HasAttr(status, "empty")
    actions: Shutdown()

    #
    # Headset Audio Scenario Support
    #
-
    trigger: InputEvent()
    filters:
             - HasAttr(switch, "HEADSET")
             - HasAttr(event, "pressed")
    actions: Command('amixer -d sset "Amp Spk" mute')
-
    trigger: InputEvent()
    filters:
             - HasAttr(switch, "HEADSET")
             - HasAttr(event, "released")
    actions: Command('amixer -d sset "Amp Spk" unmute')
-
    #
    # Idleness Brightness Handling
    #
    trigger: IdleState()
    filters: HasAttr(status, "busy")
    actions: 
             - SetDisplayBrightness("0", 100)
             - Command( "xset -display localhost:0 s off" )
-
    trigger: IdleState()
    filters: HasAttr(status, "idle_dim")
    actions: SetDisplayBrightness("0", 20)
-
    trigger: IdleState()
    filters: HasAttr(status, "idle_prelock")
    actions: 
             - SetDisplayBrightness("0", 0)
             - Command( "xset -display localhost:0 s blank" )
             - Command( "xset -display localhost:0 s activate" )
-
    trigger: IdleState()
    filters: HasAttr(status, "suspend")
    actions: Suspend()
